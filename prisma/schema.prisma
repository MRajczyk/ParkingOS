datasource db {
    provider = "postgresql"
    url = "postgresql://student:student@localhost:5432/db?schema=public"
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    USER
    ADMIN
}

model User {
    id                      Int @id @default(autoincrement())
    name                    String
    surname                 String
    email                   String @unique
    password                String
    role                    Role
    balance                 Float
    isBanned                Boolean
    cars                    Car[]
    passwordRecoveryTokens  PasswordResetToken[]
    parkingSessions         ParkingSession[]
}

model PasswordResetToken {
    id              Int @id @default(autoincrement())
    userId          Int
    user            User @relation(fields: [userId], references: [id])
    token           String
    expiration      DateTime         
}

model Car {
    id                      Int @id @default(autoincrement())
    registrationNumber      String
    name                    String
    isParked                Boolean
    userId                  Int
    user                    User @relation(fields: [userId], references: [id])
    markedForDeletion       Boolean @default(false)
    parkingSessions         ParkingSession[]
}

model Parking {
    id                      Int @id @default(autoincrement())
    monthlyCosts            MonthlyCost[]
    name                    String
    city                    String
    address                 String
    floors                  Int
    parkingPlacesPerFloor   Int
    chargePlan              ChargePlan?
    parkingPlaces           ParkingSpace[]
}

model ParkingSpace {
    id                 Int @id @default(autoincrement())
    ocuppied           Boolean
    available          Boolean @default(true)
    parkingId          Int
    parking            Parking @relation(fields: [parkingId], references: [id])
    parkingSessions    ParkingSession[]
}

model ParkingSession {
    id              Int        @id @default(autoincrement())
    ticket          String     @unique
    entranceDate    DateTime
    leaveDate       DateTime?
    finalCost       Float
    parkingId       Int
    spot            Int
    parkingSpace    ParkingSpace @relation(fields: [spot], references: [id])
    carId           Int
    car             Car @relation(fields: [carId], references: [id])
    userId          Int
    user            User @relation(fields: [userId], references: [id])
}

model ChargePlan {
    id                 Int @id @default(autoincrement())
    parkingId          Int @unique
    parking            Parking @relation(fields: [parkingId], references: [id])
    nightStart         Int
    nightEnd           Int
    dayHour1Tariff     Float
    dayHour2Tariff     Float
    dayHour3Tariff     Float
    dayHour4Tariff     Float
    nightHour1Tariff   Float
    nightHour2Tariff   Float
    nightHour3Tariff   Float
    nightHour4Tariff   Float
}

model MonthlyCost {
    id          Int         @id @default(autoincrement())
    parking     Parking     @relation(fields: [parkingId], references: [id])
    parkingId   Int 
    costName    String
    costValue   Float
    startYear   Int
    startMonth  Int
    endYear     Int?
    endMonth    Int?
    cyclic      Boolean
}
